from data_preprocessing import *

def advanced_customer_segmentation(df_encoded):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    st.subheader('üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
    
    # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    segmentation_features = ['Total', 'Quantity', 'Unit price', 'Rating', 'hour']
    X = df_encoded[segmentation_features]
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    n_clusters = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤', 2, 6, 4)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    df_encoded['Cluster'] = kmeans.fit_predict(X_scaled)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        # 3D scatter plot
        fig = px.scatter_3d(
            df_encoded, 
            x='Total', 
            y='Quantity', 
            z='Rating',
            color='Cluster',
            title='3D –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤'
        )
        st.plotly_chart(fig)
    
    with col2:
        # Radar chart –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        cluster_stats = df_encoded.groupby('Cluster')[segmentation_features].mean()
        
        categories = segmentation_features
        
        fig = go.Figure()
        for cluster in range(n_clusters):
            fig.add_trace(go.Scatterpolar(
                r=cluster_stats.loc[cluster],
                theta=categories,
                fill='toself',
                name=f'–ö–ª–∞—Å—Ç–µ—Ä {cluster}'
            ))
        
        fig.update_layout(title='–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
        st.plotly_chart(fig)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    st.dataframe(cluster_stats)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.metric(
        "–ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (Silhouette Score)", 
        f"{silhouette_score(X_scaled, df_encoded['Cluster']):.2f}"
    )
    
    return df_encoded